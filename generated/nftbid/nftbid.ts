// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class bidAnnounce extends ethereum.Event {
  get params(): bidAnnounce__Params {
    return new bidAnnounce__Params(this);
  }
}

export class bidAnnounce__Params {
  _event: bidAnnounce;

  constructor(event: bidAnnounce) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bidStartTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get bidEndTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class bidDone extends ethereum.Event {
  get params(): bidDone__Params {
    return new bidDone__Params(this);
  }
}

export class bidDone__Params {
  _event: bidDone;

  constructor(event: bidDone) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class bidtime extends ethereum.Event {
  get params(): bidtime__Params {
    return new bidtime__Params(this);
  }
}

export class bidtime__Params {
  _event: bidtime;

  constructor(event: bidtime) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get bidAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class itemListed extends ethereum.Event {
  get params(): itemListed__Params {
    return new itemListed__Params(this);
  }
}

export class itemListed__Params {
  _event: itemListed;

  constructor(event: itemListed) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class nftbid__getstatusOfListResultFolksStruct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get minPrice(): BigInt {
    return this[1].toBigInt();
  }
}

export class nftbid extends ethereum.SmartContract {
  static bind(address: Address): nftbid {
    return new nftbid("nftbid", address);
  }

  getGainedProfitAmount(): BigInt {
    let result = super.call(
      "getGainedProfitAmount",
      "getGainedProfitAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getGainedProfitAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGainedProfitAmount",
      "getGainedProfitAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getstatusOfList(
    nftAddress: Address,
    tokenId: BigInt
  ): nftbid__getstatusOfListResultFolksStruct {
    let result = super.call(
      "getstatusOfList",
      "getstatusOfList(address,uint256):((address,uint256))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<nftbid__getstatusOfListResultFolksStruct>(
      result[0].toTuple()
    );
  }

  try_getstatusOfList(
    nftAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<nftbid__getstatusOfListResultFolksStruct> {
    let result = super.tryCall(
      "getstatusOfList",
      "getstatusOfList(address,uint256):((address,uint256))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<nftbid__getstatusOfListResultFolksStruct>(value[0].toTuple())
    );
  }
}

export class AllowBidCall extends ethereum.Call {
  get inputs(): AllowBidCall__Inputs {
    return new AllowBidCall__Inputs(this);
  }

  get outputs(): AllowBidCall__Outputs {
    return new AllowBidCall__Outputs(this);
  }
}

export class AllowBidCall__Inputs {
  _call: AllowBidCall;

  constructor(call: AllowBidCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get timeOfBid(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AllowBidCall__Outputs {
  _call: AllowBidCall;

  constructor(call: AllowBidCall) {
    this._call = call;
  }
}

export class BiddingCall extends ethereum.Call {
  get inputs(): BiddingCall__Inputs {
    return new BiddingCall__Inputs(this);
  }

  get outputs(): BiddingCall__Outputs {
    return new BiddingCall__Outputs(this);
  }
}

export class BiddingCall__Inputs {
  _call: BiddingCall;

  constructor(call: BiddingCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bidAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BiddingCall__Outputs {
  _call: BiddingCall;

  constructor(call: BiddingCall) {
    this._call = call;
  }
}

export class HighestBidderPaidCall extends ethereum.Call {
  get inputs(): HighestBidderPaidCall__Inputs {
    return new HighestBidderPaidCall__Inputs(this);
  }

  get outputs(): HighestBidderPaidCall__Outputs {
    return new HighestBidderPaidCall__Outputs(this);
  }
}

export class HighestBidderPaidCall__Inputs {
  _call: HighestBidderPaidCall;

  constructor(call: HighestBidderPaidCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class HighestBidderPaidCall__Outputs {
  _call: HighestBidderPaidCall;

  constructor(call: HighestBidderPaidCall) {
    this._call = call;
  }
}

export class ListItemCall extends ethereum.Call {
  get inputs(): ListItemCall__Inputs {
    return new ListItemCall__Inputs(this);
  }

  get outputs(): ListItemCall__Outputs {
    return new ListItemCall__Outputs(this);
  }
}

export class ListItemCall__Inputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListItemCall__Outputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get ethAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
